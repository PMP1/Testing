//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace AssemblyCSharp
{
    public class Chunk2
    {

        public int xPosition;
        public int zPosition;
        public int yHeight;
        int sectionSize = 16;

        private BlockLightUpdate[] collection = new BlockLightUpdate[32*32*32];


        public ChunkManager manager;

        //16*16 = 256

        Section2[] sections;
        public int firstSection; 

        byte[] biomeMap;

        public byte[] heightMap;
        public int maxHeight;
        public int minHeight;


        bool[] daylightColumnUpdates;



        public bool containsWater = false;


        public Chunk2 ChunkNorth;
        public Chunk2 ChunkNorthEast;
        public Chunk2 ChunkEast;
        public Chunk2 ChunkSouthEast;
        public Chunk2 ChunkSouth;
        public Chunk2 ChunkSouthWest;
        public Chunk2 ChunkWest;
        public Chunk2 ChunkNorthWest;

        public int status = 0; //0=created, 1=dataloaded, 2=lightingupdated, 3=rendered
        public int pendingStatus = 0;

        public bool isDataLoaded = false; //Set when data is fully loaded and basic daylightadded

        public bool isNeighboursLoaded = false; //when true should spread daylight

        public bool isLightingUpdateRequired = true;
        //public bool isDaylightCalculated = false;
        //public bool isLightCalculated = false;
        //public bool isSectionsGenerated = false; // 

        public bool isQueuedForReRender = false;

        //requires light spread
        //basic generation?
        //requires regeneration

        public bool isSectionsRendered = false; // section completed loading and Go created

        //section = 4096

        //all 65536
        public Chunk2(ChunkManager manager, int x, int z)
        {
            xPosition = x;
            zPosition = z;
            yHeight = 256;

            this.manager = manager;

            sections = new Section2[sectionSize];
            biomeMap = new byte[sectionSize * sectionSize];
            heightMap = new byte[sectionSize * sectionSize];
            daylightColumnUpdates = new bool[sectionSize * sectionSize];



        }


        public void SetData(byte[] chunkData)
        {
            int height = chunkData.Length / 256; //one slice of 16*16 data

            //split data into sections
            for (int x = 0; x < sectionSize; x++)
            {
                for (int z = 0; z < sectionSize; z++)
                {
                    for (int y = 0; y < height; y++)
                    {
                        byte block = chunkData[x + 16 * (z + 16 * y)];

                        if (block != 0) {

                            int section = y / 16;
                            if (sections[section] == null) {
                                sections[section] = new Section2(section, this);
                            }

                            sections[section].SetBlockId(x, y % 16, z, block);
                        }
                    }
                }
            }

            SetFirstSection();
            GenerateDaylight();
        }

        private void SetFirstSection()
        {
            for (int y = 15; y >= 0; y--)
            {
                if (this.sections[y] != null)
                {
                    this.firstSection = y;
                    return;
                }
            }
        }

        public Section2 GetSection(int y)
        {
            if (y > this.firstSection)
                return null;

            return this.sections [y];
        }


        public void CheckStatusUpdate(bool useQueue)
        {
            if (status == 0)
                return;

            if (status == 3 && pendingStatus == 3)
                return;

            if (status == 1 && pendingStatus == 1 && NeightboursLoaded())
            {
                pendingStatus = 2;
                //status = 2;
                if (useQueue)
                {
                    ChunkLoader.GenerateLight(this);
                }else {
                    this.SpreadDaylight();
                    status = 2;
                }
            }

            if (status == 2 && pendingStatus == 2 && NeightboursLoaded())
            {
                pendingStatus = 3;
                if (useQueue)
                {
                    ChunkLoader.RenderChunk(this);
                }else {
                    manager.renderer.RenderChunk(this);
                }

                return;
            }
        }



        public void GenerateSecGO()
        {

            if (xPosition == 8 && zPosition == 10)
            {
                int ii = 0;
            }
            for (int i = 0; i < 16; i++)
            {
                if (sections[i] != null)
                {
                    Section2 sec = sections[i];
                    if (!sec.sectionGO) {
                        sec.GenerateGO();
                        //sec.ClearGOTempData();
                    }
                    else 
                    {
                        sec.updateMesh = true;
                        //sec.SetNewGOMesh();
                        //sec.SetNewGOCollider();
                        //sec.ClearGOTempData();
                    }
                }
            }
            this.isSectionsRendered = true;
        }

        /// <summary>
        /// A quickway to update a height, used during generation
        /// </summary>
        /// <param name="x">The x coordinate.</pforaram>
        /// <param name="z">The z coordinate.</param>
        /// <param name="height">Height.</param>
        public void SetHeightMap(int x, int z, byte height) 
        {
            this.heightMap[ x + 16 * z] = height;
        }

        public void SetBiomeMap(int x, int z, byte biome) 
        {
            this.biomeMap[ x + 16 * z] = biome;
        }

        public void SetBlockId(int x, int y, int z, byte id)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                sec.SetBlockId(x, secYPos, z, id);
            }
        }

        public byte GetBlockId(int x, int y, int z)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return 0;

            Section2 sec = this.sections [secY];

            if (sec == null)
            {
                return 0;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                return sec.GetBlockId(x, secYPos, z);
            }
        }

        public byte GetHeightMap(int x, int z)
        {
            return this.heightMap [x + 16 * z];
        }

        public bool NeightboursLoaded()
        {
            if (ChunkNorth == null)
                return false;
            if (ChunkNorthEast == null)
                return false;
            if (ChunkEast == null)
                return false;
            if (ChunkSouthEast == null)
                return false;
            if (ChunkSouth == null)
                return false;
            if (ChunkSouthWest == null)
                return false;
            if (ChunkWest == null)
                return false;
            if (ChunkNorthWest == null)
                return false;

            return true;
        }


        public bool HasNeighbours(int x, int y, int z, int blockDist)
        {
            return manager.DoChunksExist(x, y, z, blockDist);
        }

        #region light operators

        public byte GetDaylightValue(int x, int y, int z)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return 0;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return 0;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                return sec.GetDaylightValue(x, secYPos, z);
            }
        }

        public void SetDaylightValue(int x, int y, int z, byte level)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                sec.SetDatlightData(x, secYPos, z, level);
            }
        }

        public int GetLightOpacity(int x, int y, int z) 
        {
            return BlockManager.GetLightOpacity(GetBlockId(x, y, z));
        }

        public void GenerateDaylight() 
        {
            //bool secChanged[] = false;
            for (int x = 0; x < 16; x++)
            {
                for (int z = 0; z < 16; z++)
                {
                    int lightLevel = 15;

                    for (int y = (this.firstSection * sectionSize) + sectionSize - 1; y > 0; y --)
                    {
                        lightLevel -= this.GetLightOpacity(x, y, z);
                        if (lightLevel > 0) {
                            Section2 sec = this.sections[y /16];
                            sec.SetDatlightData(x, y % 16, z, lightLevel);
                        } else {
                            break;
                        }

                    }

                    this.daylightColumnUpdates[x + 16 * z] = true;
                }
            }
        }

        /*public void SpreadDaylight_tick()
        {
            if (isLightingUpdateRequired)
            {
                if (SpreadDaylight())
                {
                    ChunkLoader.RequestLightRegeneration(manager, this);
                }
            }
        }*/

        public bool SpreadDaylight()
        {
            if (manager.DoChunksExist(this.xPosition << 4, 0, this.zPosition << 4, 16))
            {
                for (int x = 0; x < 16; x++)
                {
                    for (int z = 0; z < 16; z++)
                    {
                        byte c = GetHeightMap(x, z);
                        byte n = z < 15 ? GetHeightMap(x, z + 1) : c;
                        byte e = x < 15 ? GetHeightMap(x + 1, z) : c;
                        byte s = z > 0 ? GetHeightMap(x, z - 1) : c;
                        byte w = x < 0 ? GetHeightMap(x - 1, z) : c;

                        //need to get the heighest neighbour
                        if (n < e)
                            n = e;
                        if (n < s)
                            n = s;
                        if (n < w)
                            n = w;

                        for (int y = c; y < n; y++)
                        {
                            UpdateLightBlock(x, y, z, 15);
                            UpdateLightBlock(x, y, z + 1, 15);
                            UpdateLightBlock(x, y, z - 1, 15);
                            UpdateLightBlock(x + 1, y, z, 15);
                            UpdateLightBlock(x - 1, y, z, 15);
                        }
                    }
                }
                isLightingUpdateRequired = false;
                return true;
            }
            return false;
        }



        public void UpdateDaylight(byte level)
        {

            for (int i = 0; i < 16; i++)
            {
                if (sections[i] != null)
                {
                    Section2 sec = sections[i];
                    if (sec.sectionGO) {
                        sec.sectionGO.SetDaylight(level);
                    }
                }
            }
        }

        public int GetChunkLight(int chunkX, int y, int chunkZ)
        {
            int secY = y >> 4;
            if (sections.Length < secY)
                return 0;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return 0;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                return sec.GetDaylightValue(chunkX, secYPos, chunkZ);
            }
        }

        public void SetChunkLight(int chunkX, int y, int chunkZ, int value)
        {
            int secY = y >> 4;
            if (sections.Length < secY)
                return;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                sec.SetDaylightData(chunkX, secYPos, chunkZ, value);
            }
        }



        private Chunk2 GetChunk(int chunkX, int chunkZ)
        {
            if (chunkX < 0) //west
            {
                if (chunkZ < 0) //south
                {
                    return ChunkSouthWest;
                } else if (chunkZ >= 16) //north
                {
                    return ChunkNorthWest;
                } else //center
                {
                    return ChunkWest;
                }
            } else if (chunkX >= 16) //east
            {
                if (chunkZ < 0) //south
                {
                    return ChunkSouthEast;
                } else if (chunkZ >= 16) //north
                {
                    return ChunkNorthEast;
                } else //center
                {
                    return ChunkEast;
                }
            } else //center
            {
                if (chunkZ < 0) //south
                {
                    return ChunkSouth;
                } else if (chunkZ >= 16) //north
                {
                    return ChunkNorth;
                } else //center
                {
                    return this;
                }
            }
        }


        private int GetLight(int chunkX, int chunkY, int chunkZ)
        {
            if (chunkY >= 256)
                return 15;

            if (chunkY <= 0)
                return 0;

            Chunk2 chunk = GetChunk(chunkX, chunkZ);

            int x = (xPosition << 4) + chunkX;
            int z = (zPosition << 4) + chunkZ;

            return chunk.GetChunkLight(x - (chunk.xPosition * 16), chunkY, z);
        }

        public void UpdateLightBlock(int x, int y, int z, byte level)
        {
            
            //ChunkCache cache = new ChunkCache(x, z, 17, this);
            //origin x, y, z
            //current x, y, z
            //current level
            int capacity = 0;
            int current = 0;
            
            //if (DoChunksExist(x, y, x, 16))
            {
                
                collection [capacity++] = new BlockLightUpdate(x, y, z, level);
                
                while (capacity > current)
                {
                    int n = 0;
                    int s = 0;
                    int t = 0;
                    int b = 0;
                    int e = 0;
                    int w = 0;
                    bool neightboursLoaded = false;
                    
                    BlockLightUpdate block = collection [current++];
                    
                    int posX = block.posX;
                    int posY = block.posY;
                    int posZ = block.posZ;

                    int savedValue = GetLight(posX,posY,posZ);

                    //int savedValue = cache.GetLightValue(posX,posY,posZ);
                    
                    int calcValue = 0;
                    
                    if (cache.FacesTheSky(posX, posY, posZ))
                    {
                        calcValue = 15;
                    } else
                    {
                        n = GetLight(posX, posY, posZ + 1);
                        s = GetLight(posX, posY, posZ - 1);
                        t = GetLight(posX, posY + 1, posZ);
                        b = GetLight(posX, posY - 1, posZ);
                        e = GetLight(posX + 1, posY, posZ);
                        w = GetLight(posX - 1, posY, posZ);


                        neightboursLoaded = true;
                        calcValue = CalcLightValue(posX, posY, posZ, n, s, e, w, t, b);
                    }
                    
                    if (calcValue != savedValue)
                    {
                        cache.SetLightValue(posX, posY, posZ, calcValue);
                        
                        if (capacity < 32762) 
                        {
                            if (calcValue > savedValue)
                            {
                                if (!neightboursLoaded)
                                {
                                    n = GetLight(posX, posY, posZ + 1);
                                    s = GetLight(posX, posY, posZ - 1);
                                    t = GetLight(posX, posY + 1, posZ);
                                    b = GetLight(posX, posY - 1, posZ);
                                    e = GetLight(posX + 1, posY, posZ);
                                    w = GetLight(posX - 1, posY, posZ);
                                }
                                
                                //calc distance from staret if (
                                int diffX = Math.Abs(posX - x);
                                int diffY = Math.Abs(posY - y);
                                int diffZ = Math.Abs(posZ - z); 
                                
                                if (diffX + diffY + diffZ < 17)
                                {
                                    if (n < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX, posY, posZ + 1, calcValue);
                                    }
                                    if (s < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX, posY, posZ - 1, calcValue);
                                    }
                                    if (e < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX + 1, posY, posZ, calcValue);
                                    }
                                    if (w < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX - 1, posY, posZ, calcValue);
                                    }
                                    if (t < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX, posY + 1, posZ, calcValue);
                                    }
                                    if (b < calcValue)
                                    {
                                        collection [capacity++] = new BlockLightUpdate(posX, posY - 1, posZ, calcValue);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        private int CalcLightValue(int x, int y, int z, int n, int s, int e, int w, int t, int b)
        {
            int level = 0;
            
            int opacity = GetBlock(x, y, z).LightOpacity;
            
            if (opacity >= 15)
            {
                return 0;
            }
            
            n-=2;
            s-=2;
            e-=2;
            w-=2;
            t-=2;
            b-=2;
            
            if (n > level)
                level = n;
            if (s > level)
                level = s;
            if (t > level)
                level = t;
            if (b > level)
                level = b;
            if (e > level)
                level = e;
            if (w > level)
                level = w;
            
            return level;
        }

        public bool FacesTheSky(int globalX, int globalY, int globalZ)
        {
            int chunkX = globalX >> 4;
            int chunkZ = globalZ >> 4;
            
            int relChunkX = chunkX - _chunkX;
            int relChunkZ = chunkZ - _chunkZ;
            
            int chunkposX = globalX - (chunkX * 16);
            int chunkposZ = globalZ - (chunkZ * 16);
            
            Chunk2 chunk;
            
            try
            {
                chunk = GetChunk(relChunkX, relChunkZ);
                if (chunk == null) 
                {
                    return true;
                }
                
                byte height = chunk.GetHeightMap(chunkposX, chunkposZ);
                
                if ((int)height == globalY)
                {
                    return true; // is directly touched by sunlight
                }
            }
            catch
            {
                return true;
            }
            return false;
        }
        #endregion
    }
}

