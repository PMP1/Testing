//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
    public class ChunkRenderer
    {
        public GameObject sectionGo;
        private World world;
        private ChunkManager chunkManager;

        private List<Vector3> newVertices = new List<Vector3> ();
        private List<int> newTriangles = new List<int> ();
        private List<Vector2> newUV = new List<Vector2> ();
        
        private List<Vector3> newColliderVertices = new List<Vector3> ();
        private List<int> newColliderTriangles = new List<int> ();
        
        private List<Color> newColor = new List<Color> ();
        private float tUnit = 0.25f;

        private int faceCount = 0;

        private SectionColliderGenerator colliderGenerator;
        private bool smoothLighting = true;


        private Chunk2 centerChunk;
        private Chunk2 chunkNorth;
        private Chunk2 chunkNorthEast;
        private Chunk2 chunkEast;
        private Chunk2 chunkSouthEast;
        private Chunk2 chunkSouth;
        private Chunk2 chunkSouthWest;
        private Chunk2 chunkWest;
        private Chunk2 chunkNorthWest;
        private bool neighboursLoaded = false; 



        public ChunkRenderer(ChunkManager manager, World world)
        {
            this.chunkManager = manager;
            this.world = world;
            this.colliderGenerator = new SectionColliderGenerator(this);
        }


        
        public void RenderChunk(Chunk2 chunk) 
        {
            int firstSection = chunk.firstSection;
            byte daylightLevel = world.time.GetDaylightLevel();

            centerChunk = chunk;
            chunkNorth = chunkManager.GetChunk(chunk.xPosition, chunk.zPosition + 1);
            chunkNorthEast = chunkManager.GetChunk(chunk.xPosition + 1, chunk.zPosition + 1);
            chunkEast = chunkManager.GetChunk(chunk.xPosition + 1, chunk.zPosition);
            chunkSouthEast = chunkManager.GetChunk(chunk.xPosition + 1, chunk.zPosition - 1);
            chunkSouth = chunkManager.GetChunk(chunk.xPosition, chunk.zPosition - 1);
            chunkSouthWest = chunkManager.GetChunk(chunk.xPosition - 1, chunk.zPosition - 1);
            chunkWest = chunkManager.GetChunk(chunk.xPosition - 1, chunk.zPosition);
            chunkNorthWest = chunkManager.GetChunk(chunk.xPosition - 1, chunk.zPosition + 1);

            if (chunkEast != null && chunkWest != null && chunkNorth != null && chunkSouth != null)
            {
                neighboursLoaded = true;
            }

            for (int secY = firstSection; secY >= 0; secY--) 
            {
                Section2 section = chunk.GetSection(secY);
                RenderSection(section, chunk, daylightLevel);
            }
        }

        private void RenderSection(Section2 sec, Chunk2 chunk, byte daylight) 
        {
            System.DateTime startGenMesh = System.DateTime.Now;
            GenerateMesh(sec, chunk);
            StatsEngine.SectionMeshGen += (float)System.DateTime.Now.Subtract(startGenMesh).TotalSeconds;

            if (faceCount > 0)
            {
                System.DateTime startCreateCollider = System.DateTime.Now;
                colliderGenerator.GenerateCollisionMatrix(sec, ref newColliderTriangles, ref newColliderVertices);
                StatsEngine.SectionColliderGen += (float)System.DateTime.Now.Subtract(startCreateCollider).TotalSeconds;

                System.DateTime startCreateGO = System.DateTime.Now;
                GameObject newSectionGO = world.CreateSectionGO(chunk, sec);
                StatsEngine.SectionGoCreate += (float)System.DateTime.Now.Subtract(startCreateGO).TotalSeconds;

                sec.sectionGO = newSectionGO.GetComponent("SectionGO") as SectionGO;
                sec.sectionGO.world = world;
                sec.sectionGO.SetMesh(newUV, newVertices, newTriangles, newColor);
                sec.sectionGO.SetCollider(newColliderVertices, newColliderTriangles);
                sec.sectionGO.SetDaylight(daylight);
            }
            newUV.Clear();
            newVertices.Clear();
            newTriangles.Clear();
            newColor.Clear();
            faceCount = 0;

            newColliderTriangles.Clear();
            newColliderVertices.Clear();


        }

        private Block GetBlock(int x, int y, int z)
        {
            return BlockManager.GetBlock(GetBlockId(x, y, z));
        }

        //local values
        public byte GetBlockId(int x, int y, int z)
        {
            byte blockId = 3;
            
            if (y >= 256 || y < 0)
            {
                return (byte)0;
            } else
            {
                
                if (x < 0) 
                {
                    if (z < 0) 
                    {
                        //sw
                        if (chunkSouthWest == null)
                            blockId = 3;
                        else 
                            blockId = chunkSouthWest.GetBlockId(x + 16, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //nw
                        if (chunkNorthWest == null)
                            blockId = 3;
                        else 
                            blockId = chunkNorthWest.GetBlockId(x + 16, y, z - 16);
                    }
                    else 
                    {
                        //w
                        if (chunkWest == null)
                            blockId = 3;
                        else 
                            blockId = chunkWest.GetBlockId(x + 16, y, z);
                    }
                } 
                else if (x >= 16)
                {
                    if (z < 0) 
                    {
                        //se
                        if (chunkSouthEast == null)
                            blockId = 3;
                        else 
                            blockId = chunkSouthEast.GetBlockId(x - 16, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //ne
                        if (chunkNorthEast == null)
                            blockId = 3;
                        else 
                            blockId = chunkNorthEast.GetBlockId(x - 16, y, z - 16);
                    }
                    else 
                    {
                        //e
                        if (chunkEast == null)
                            blockId = 3;
                        else 
                            blockId = chunkEast.GetBlockId(x - 16, y, z);
                    }
                }
                else
                {
                    //center
                    if (z < 0) 
                    {
                        //s
                        if (chunkSouth == null)
                            blockId = 3;
                        else 
                            blockId = chunkSouth.GetBlockId(x, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //n
                        if (chunkNorth == null)
                            blockId = 3;
                        else 
                            blockId = chunkNorth.GetBlockId(x, y, z - 16);
                    }
                    else 
                    {
                        //c
                        //if (centerChunk == null)
                        //    blockId = 3;
                        //else 
                        blockId = centerChunk.GetBlockId(x, y, z);
                    }
                }
                
                
                return blockId;
            }
        }

        //local values
        public byte GetDaylightValue(int x, int y, int z)
        {
            byte value = 15;
            
            if (y >= 256 || y < 0)
            {
                return (byte)15;
            } else
            {
                
                if (x < 0) 
                {
                    if (z < 0) 
                    {
                        //sw
                        if (chunkSouthWest == null)
                            value = 15;
                        else 
                            value = chunkSouthWest.GetDaylightValue(x + 16, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //nw
                        if (chunkNorthWest == null)
                            value = 15;
                        else 
                            value = chunkNorthWest.GetDaylightValue(x + 16, y, z - 16);
                    }
                    else 
                    {
                        //w
                        if (chunkWest == null)
                            value = 15;
                        else 
                            value = chunkWest.GetDaylightValue(x + 16, y, z);
                    }
                } 
                else if (x >= 16)
                {
                    if (z < 0) 
                    {
                        //se
                        if (chunkSouthEast == null)
                            value = 15;
                        else 
                            value = chunkSouthEast.GetDaylightValue(x - 16, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //ne
                        if (chunkNorthEast == null)
                            value = 15;
                        else 
                            value = chunkNorthEast.GetDaylightValue(x - 16, y, z - 16);
                    }
                    else 
                    {
                        //e
                        if (chunkEast == null)
                            value = 15;
                        else 
                            value = chunkEast.GetDaylightValue(x - 16, y, z);
                    }
                }
                else
                {
                    //center
                    if (z < 0) 
                    {
                        //s
                        if (chunkSouth == null)
                            value = 15;
                        else 
                            value = chunkSouth.GetDaylightValue(x, y, z + 16);
                    } 
                    else if (z >= 16)
                    {
                        //n
                        if (chunkNorth == null)
                            value = 15;
                        else 
                            value = chunkNorth.GetDaylightValue(x, y, z - 16);
                    }
                    else 
                    {
                        //c
                        //if (centerChunk == null)
                        //    blockId = 3;
                        //else 
                        value = centerChunk.GetDaylightValue(x, y, z);
                    }
                }
                
                
                return value;
            }
        }

        private void GenerateMesh(Section2 section, Chunk2 chunk) 
        {
            int chunkx = chunk.xPosition;
            int chunkz = chunk.zPosition;

            int posx;
            int posy;
            int posz;


            for (int x = 0; x < 16; x++)
            {
                for (int y = 0; y < 16; y++)
                {
                    for (int z = 0; z < 16; z++)
                    {
                        posx = x + (chunkx * 16);
                        posy = y + (section.posY * 16);
                        posz = z + (chunkz * 16);

                        //byte id = this.GetBlockId(x, posy, z);

                        byte id = section.GetBlockId(x, y, z);
                        //Block block = this.chunkManager.GetBlock(posx, posy, posz);

                        //int t1 = (int)block.BlkType;
                        //int t2 = (int)id;

                        //if (t1 != t2) {
                        //    var ii = 33;
                        //}

                        if (id != (byte)0)//|| block.LightOpacity < 16)
                        {
                            //Block block = this.chunkManager.GetBlock(posx, posy, posz);
                            Block block = BlockManager.GetBlock((byte)id);

                            //Block blockT = this.chunkManager.GetBlock(posx, posy + 1, posz);
                            //Block blockB = this.chunkManager.GetBlock(posx, posy - 1, posz);
                            //Block blockN = this.chunkManager.GetBlock(posx, posy, posz + 1);
                            //Block blockE = this.chunkManager.GetBlock(posx + 1, posy, posz);
                            //Block blockS = this.chunkManager.GetBlock(posx, posy, posz - 1);
                            //Block blockW = this.chunkManager.GetBlock(posx - 1, posy, posz);

                            Block blockT = this.GetBlock(x, posy + 1, z);
                            Block blockB = this.GetBlock(x, posy - 1, z);
                            Block blockN = this.GetBlock(x, posy, z + 1);
                            Block blockE = this.GetBlock(x + 1, posy, z);
                            Block blockS = this.GetBlock(x, posy, z - 1);
                            Block blockW = this.GetBlock(x - 1, posy, z);

                            System.DateTime startCreateSmoothLight;
                            double currentlighting = 0;

                            if ((int)blockT.BlkType == (int)BlockType.Air) // || (blockT.LightOpacity < 16 && blockT.BlockType != block.BlockType)) 
                            {
                                CubeTop(x, y, z, block);
                                startCreateSmoothLight = System.DateTime.Now;
                                CubeTopLight(x, posy, z, block);
                                currentlighting += System.DateTime.Now.Subtract(startCreateSmoothLight).TotalSeconds;
                            }
                            if ((int)blockB.BlkType == (int)BlockType.Air)
                            {
                                CubeBot(x, y, z, block);
                            }
                            if ((int)blockN.BlkType == (int)BlockType.Air)
                            {
                                CubeNorth(x, y, z, block);
                                startCreateSmoothLight = System.DateTime.Now;
                                CubeNorthLight(x, posy, z, block);
                                currentlighting += System.DateTime.Now.Subtract(startCreateSmoothLight).TotalSeconds;
                            }
                            if ((int)blockE.BlkType == (int)BlockType.Air)
                            {
                                CubeEast(x, y, z, block);
                                startCreateSmoothLight = System.DateTime.Now;
                                CubeEastLight(x, posy, z, block);
                                currentlighting += System.DateTime.Now.Subtract(startCreateSmoothLight).TotalSeconds;
                            }
                            if ((int)blockS.BlkType == (int)BlockType.Air)
                            {
                                CubeSouth(x, y, z, block);
                                startCreateSmoothLight = System.DateTime.Now;
                                CubeSouthLight(x, posy, z, block);
                                currentlighting += System.DateTime.Now.Subtract(startCreateSmoothLight).TotalSeconds;
                            }
                            if ((int)blockW.BlkType == (int)BlockType.Air)
                            {
                                CubeWest(x, y, z, block);
                                startCreateSmoothLight = System.DateTime.Now;
                                CubeWestLight(x, posy, z, block);
                                currentlighting += System.DateTime.Now.Subtract(startCreateSmoothLight).TotalSeconds;
                            }

                            StatsEngine.SectionSmoothLighting += (float)currentlighting;
                        }
                    }
                }
            }
        }

        private void CubeTop (int x, int y, int z, Block block)
        {
            newVertices.Add(new Vector3(x, y, z + 1));
            newVertices.Add(new Vector3(x + 1, y, z + 1));
            newVertices.Add(new Vector3(x + 1, y, z));
            newVertices.Add(new Vector3(x, y, z));
            
            Vector2 texturePos = block.Texture;
            Cube(texturePos);


            //CubeLight(3, 3, 3, 3);
        }

        private void CubeNorth (int x, int y, int z, Block block)
        {
            newVertices.Add(new Vector3(x + 1, y - 1, z + 1));
            newVertices.Add(new Vector3(x + 1, y, z + 1));
            newVertices.Add(new Vector3(x, y, z + 1));
            newVertices.Add(new Vector3(x, y - 1, z + 1));
            
            Vector2 texturePos = block.Texture;
            Cube(texturePos);

            ///CubeNorthLight(x, y, z, block);
            //CubeLight(0, 0, 0, 0);
        }

        private void CubeEast (int x, int y, int z, Block block)
        {
            newVertices.Add(new Vector3(x + 1, y - 1, z));
            newVertices.Add(new Vector3(x + 1, y, z));
            newVertices.Add(new Vector3(x + 1, y, z + 1));
            newVertices.Add(new Vector3(x + 1, y - 1, z + 1));
            
            Vector2 texturePos = block.Texture;
            Cube(texturePos);

            //CubeLight(0, 0, 0, 0);
        }

        
        private void CubeSouth (int x, int y, int z, Block block)
        {
            newVertices.Add(new Vector3(x, y - 1, z));
            newVertices.Add(new Vector3(x, y, z));
            newVertices.Add(new Vector3(x + 1, y, z));
            newVertices.Add(new Vector3(x + 1, y - 1, z));
            
            Vector2 texturePos = block.Texture;
            Cube(texturePos);

            //CubeLight(0, 0, 0, 0);
        }


        
        private void CubeWest (int x, int y, int z, Block block)
        {
            newVertices.Add(new Vector3(x, y - 1, z + 1));
            newVertices.Add(new Vector3(x, y, z + 1));
            newVertices.Add(new Vector3(x, y, z));
            newVertices.Add(new Vector3(x, y - 1, z));

            Vector2 texturePos = block.Texture;
            Cube(texturePos);

            //CubeLight(0, 0, 0, 0);
        }

        private void CubeBot (int x, int y, int z, Block block)
        {
            
            newVertices.Add(new Vector3(x, y - 1, z));
            newVertices.Add(new Vector3(x + 1, y - 1, z));
            newVertices.Add(new Vector3(x + 1, y - 1, z + 1));
            newVertices.Add(new Vector3(x, y - 1, z + 1));
            
            Vector2 texturePos = block.Texture;
            Cube(texturePos);

            CubeLight(15);
        }

        
        private void CubeTopLight(int x, int y, int z, Block block) 
        {
            if (smoothLighting)
            {

                Block blockN = this.GetBlock(x, y + 1, z + 1);
                Block blockNE = this.GetBlock(x + 1, y + 1, z + 1);
                Block blockE = this.GetBlock(x + 1, y + 1, z);
                Block blockSE = this.GetBlock(x + 1, y + 1, z - 1);
                Block blockS = this.GetBlock(x, y + 1, z - 1);
                Block blockSW = this.GetBlock(x - 1, y + 1, z - 1);
                Block blockW = this.GetBlock(x - 1, y + 1, z);
                Block blockNW = this.GetBlock(x - 1, y + 1, z + 1);

                byte light = this.GetDaylightValue(x, y + 1, z);
            
                int c1 = GetCornerLight(blockN, blockW, blockNW);
                int c2 = GetCornerLight(blockS, blockW, blockSW);
                int c3 = GetCornerLight(blockS, blockE, blockSE);
                int c4 = GetCornerLight(blockN, blockE, blockNE);
                
                CubeLight(c1, c4, c3, c2, light);
            } else
            {
                CubeLight(15);
            }
        }

        
        private void CubeNorthLight(int x, int y, int z, Block block) 
        {
            if (smoothLighting)
            {
                Block blockT  = this.GetBlock (x,   y+1, z+1); //top
                Block blockTE = this.GetBlock (x+1, y+1, z+1); //top - east
                Block blockE  = this.GetBlock (x+1, y,   z+1);
                Block blockBE = this.GetBlock (x+1, y-1, z+1);
                Block blockB  = this.GetBlock (x,   y-1, z+1);
                Block blockBW = this.GetBlock (x-1, y-1, z+1);
                Block blockW  = this.GetBlock (x-1, y,   z+1);
                Block blockTW= this.GetBlock (x-1, y+1, z+1);

                int c1 = GetCornerLight(blockT, blockW, blockTW);
                int c2 = GetCornerLight(blockB, blockW, blockBW);
                int c3 = GetCornerLight(blockB, blockE, blockBE);
                int c4 = GetCornerLight(blockT, blockE, blockTE);

                byte light = this.GetDaylightValue(x, y, z + 1);

                CubeLight(c3, c4, c1, c2, light);
            } else
            {
                CubeLight(15);
            }
        }
        
        private void CubeEastLight(int x, int y, int z, Block block) 
        {
            if (smoothLighting)
            {
                Block blockT = this.GetBlock(x + 1, y + 1, z); //top
                Block blockTN = this.GetBlock(x + 1, y + 1, z + 1); //top - east
                Block blockN = this.GetBlock(x + 1, y, z + 1);
                Block blockBN = this.GetBlock(x + 1, y - 1, z + 1);
                Block blockB = this.GetBlock(x + 1, y - 1, z);
                Block blockBS = this.GetBlock(x + 1, y - 1, z - 1);
                Block blockS = this.GetBlock(x + 1, y, z - 1);
                Block blockTS = this.GetBlock(x + 1, y + 1, z - 1);
            
                int c1 = GetCornerLight(blockT, blockN, blockTN);
                int c2 = GetCornerLight(blockB, blockN, blockBN);
                int c3 = GetCornerLight(blockB, blockS, blockBS);
                int c4 = GetCornerLight(blockT, blockS, blockTS);

                byte light = this.GetDaylightValue(x +1, y, z);

                CubeLight(c3, c4, c1, c2, light);       
            } else
            {
                CubeLight(15);
            }
        }

        
        private void CubeSouthLight(int x, int y, int z, Block block) 
        {
            if (smoothLighting)
            {
                Block blockT = this.GetBlock(x, y + 1, z - 1); //top
                Block blockTE = this.GetBlock(x + 1, y + 1, z - 1); //top - east
                Block blockE = this.GetBlock(x + 1, y, z - 1);
                Block blockBE = this.GetBlock(x + 1, y - 1, z - 1);
                Block blockB = this.GetBlock(x, y - 1, z - 1);
                Block blockBW = this.GetBlock(x - 1, y - 1, z - 1);
                Block blockW = this.GetBlock(x - 1, y, z - 1);
                Block blockTW = this.GetBlock(x - 1, y + 1, z - 1);
            
                int c1 = GetCornerLight(blockT, blockE, blockTE);
                int c2 = GetCornerLight(blockB, blockE, blockBE);
                int c3 = GetCornerLight(blockB, blockW, blockBW);
                int c4 = GetCornerLight(blockT, blockW, blockTW);

                byte light = this.GetDaylightValue(x, y, z - 1);

                CubeLight(c3, c4, c1, c2, light);
            } else
            {
                CubeLight(15);
            }
        }

        private void CubeWestLight(int x, int y, int z, Block block) 
        {   
            if (smoothLighting)
            {
                Block blockT = this.GetBlock(x - 1, y + 1, z); //top
                Block blockTN = this.GetBlock(x - 1, y + 1, z + 1); //top - north
                Block blockN = this.GetBlock(x - 1, y, z + 1);
                Block blockBN = this.GetBlock(x - 1, y - 1, z + 1);
                Block blockB = this.GetBlock(x - 1, y - 1, z);
                Block blockBS = this.GetBlock(x - 1, y - 1, z - 1);
                Block blockS = this.GetBlock(x - 1, y, z - 1);
                Block blockTS = this.GetBlock(x - 1, y + 1, z - 1);
               
                int c1 = GetCornerLight(blockT, blockN, blockTN);
                int c2 = GetCornerLight(blockB, blockN, blockBN);
                int c3 = GetCornerLight(blockB, blockS, blockBS);
                int c4 = GetCornerLight(blockT, blockS, blockTS);

                byte light = this.GetDaylightValue(x - 1, y, z);

                CubeLight(c2, c1, c4, c3, light);       
            } else
            {
                CubeLight(15);
            }
        }


        private int GetCornerLight(Block side1, Block side2, Block corner)
        {
            if ((int)side1.BlkType != 0 && (int)side2.BlkType != 0)
            {
                return 4;
            }

            int hasSide1 = (int)side1.BlkType != 0 ? 1 : 0;
            int hasSide2 = (int)side2.BlkType != 0 ? 1 : 0;
            int hasCorner = (int)corner.BlkType != 0 ? 1 : 0;
            return 1 + (hasSide1 + hasSide2 + hasCorner);
        }

        void CubeLight(int defaultLevel) {

            float level = defaultLevel / 15f;

            newColor.Add(new Color(0f,0f,0f,level));
            newColor.Add(new Color(0f,0f,0f,level));
            newColor.Add(new Color(0f,0f,0f,level));
            newColor.Add(new Color(0f,0f,0f,level));
        }

        void CubeLight(int c1, int c2, int c3, int c4, byte light) {
            
            newColor.Add(new Color(0f,0f,0f,light/(c1*15f)));
            newColor.Add(new Color(0f,0f,0f,light/(c2*15f)));
            newColor.Add(new Color(0f,0f,0f,light/(c3*15f)));
            newColor.Add(new Color(0f,0f,0f,light/(c4*15f)));
        }

        void Cube (Vector2 texturePos)
        {
            newTriangles.Add (faceCount * 4); //1
            newTriangles.Add (faceCount * 4 + 1); //2
            newTriangles.Add (faceCount * 4 + 2); //3
            newTriangles.Add (faceCount * 4); //1
            newTriangles.Add (faceCount * 4 + 2); //3
            newTriangles.Add (faceCount * 4 + 3); //4
            
            newUV.Add (new Vector2 (tUnit * texturePos.x + tUnit, tUnit * texturePos.y));
            newUV.Add (new Vector2 (tUnit * texturePos.x + tUnit, tUnit * texturePos.y + tUnit));
            newUV.Add (new Vector2 (tUnit * texturePos.x, tUnit * texturePos.y + tUnit));
            newUV.Add (new Vector2 (tUnit * texturePos.x, tUnit * texturePos.y));
                        
            faceCount++; // Add this line
        }



    }
}

