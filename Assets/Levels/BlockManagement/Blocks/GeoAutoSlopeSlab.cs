//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace AssemblyCSharp
{
    /// <summary>
    /// A half slabthat always tries to for a slope -- sand
    /// </summary>
    public class GeoAutoSlopeSlab : BlockGeo
    {
        
        public int Id { get; private set; }
        private readonly string name;
        private ChunkRenderer cr;
        
        public GeoAutoSlopeSlab(int id, string name)
            : base(id, name)
        {
            //t, n, e, s, w, b
            completeFace = new float[] {0, .5f, .5f, .5f, .5f, 1};
        }
        
        public override float GetFillValue()
        {
            return .5f;
        }
        
        public override void Render(Block block, ChunkRenderer cr, int x, int y, int posy, int z)
        {
            this.cr = cr;
            int t = cr.GetBlockId(x, posy + 1, z);
            int b = cr.GetBlockId(x, posy - 1, z);
            int s = cr.GetBlockId(x, posy, z - 1);
            int w = cr.GetBlockId(x - 1, posy, z);
            int n = cr.GetBlockId(x, posy, z + 1);
            int e = cr.GetBlockId(x + 1, posy, z);


            int gt = cr.GetGeoBlockId(x, posy + 1, z);
            int gb = cr.GetGeoBlockId(x, posy - 1, z);
            int gs = cr.GetGeoBlockId(x, posy, z - 1);
            int gw = cr.GetGeoBlockId(x - 1, posy, z);
            int gn = cr.GetGeoBlockId(x, posy, z + 1);
            int ge = cr.GetGeoBlockId(x + 1, posy, z);


            bool north = true;
            bool east = true;
            bool south = true;
            bool west = true;

            if (n == 0)
                north = false;

            if (e == 0)
                east = false;

            if (s == 0)
                south = false;

            if (w == 0)
                west = false;

            int se = cr.GetBlockId(x + 1, posy, z - 1);
            int sw = cr.GetBlockId(x - 1, posy, z - 1);
            int ne = cr.GetBlockId(x + 1, posy, z + 1);
            int nw = cr.GetBlockId(x - 1, posy, z + 1);
            
            bool southEast = true;
            bool northEast = true;
            bool southWest = true;
            bool northWest = true;
            
            if (se == 0)
                southEast = false;
            
            if (sw == 0)
                southWest = false;
            
            if (ne == 0)
                northEast = false;
            
            if (nw == 0)
                northWest = false;

            float[] x_points = {0, 1, 1, 0, 0, 1, 1, 0};
            float[] z_points = {0, 0, 1, 1, 0, 0, 1, 1};
            float[] y_points = {};

            //  7 - 6 
            //  | 4 + 5
            //  3 + 2 |
            //    0 - 1


       /*       + - + - + - +
                |   |   |   |
                + - + - + - +
                |   |   |   |
                + - + - + - +
                |   |   |   |
                + - + - + - +     */

            if (!north && south && east && west)
            {
                if(southEast && southWest) 
                {
                    y_points = new float[] {0, 0, 0, 0, 0.5f, 0.5f, 0, 0};
                } else if (!northWest && !southWest)
                {
                    y_points = new float[] {0, 0, 0, 0, 0, 0.5f, 0, 0.5f};
                    x_points = new float[] {0, 1, 1, 0, 0, 1, 1, 0};
                    z_points = new float[] {0, 0, 1, 1, 0, 0, 1, 0.5f};

                } else if (!northEast || !southEast)
                {
                    
                }

            } else if (north && !south && east && west)
            {
                y_points = new float[] {0, 0, 0, 0, 0, 0, 0.5f, 0.5f};
            } else if (north && south && !east && west)
            {
                y_points = new float[] {0, 0, 0, 0, 0.5f, 0, 0, 0.5f};
            } else if (north && south && east && !west)
            {
                if(southEast && northEast) 
                {
                    y_points = new float[] {0, 0, 0, 0, 0, 0.5f, 0.5f, 0};
                } else if (!southEast || !southWest)
                {

                } else if (!northEast || !northWest)
                {

                }
            } else if (!north && south && !east && west)
            {
                y_points = new float[] {0, 0, 0, 0, 0.5f, 0, 0, 0};
            } else if (north && !south && !east && west)
            {
                y_points = new float[] {0, 0, 0, 0, 0, 0, 0, 0.5f};
            } else if (north && !south && east && !west)
            {
                y_points = new float[] {0, 0, 0, 0, 0, 0, 0.5f, 0};
            } else if (!north && south && east && !west)
            {
                y_points = new float[] {0, 0, 0, 0, 0, 0.5f, 0, 0};
            } else if (north && south && east && west)
            {
               

                if (northEast && northWest && southEast && southWest)
                {
                    y_points = new float[] {0, 0, 0, 0, 0.5f, 0.5f, 0.5f, 0.5f};
                } else if (!northEast && northWest && southEast && southWest) {
                    y_points = new float[] {0, 0, 0, 0, 0.5f, 0.5f, 0, 0.5f};
                } else if (northEast && !northWest && southEast && southWest) {
                    y_points = new float[] {0, 0, 0, 0, 0.5f, 0.5f, 0.5f, 0};
                } else if (northEast && northWest && !southEast && southWest) {
                    y_points = new float[] {0, 0, 0, 0, 0.5f, 0, 0.5f, 0.5f};
                } else if (northEast && northWest && southEast && !southWest) {
                    y_points = new float[] {0, 0, 0, 0, 0, 0.5f, 0.5f, 0.5f};
                }
            }

            if (y_points.Length != 0)
            {
                Cube(block, x, y, z, 4, 7, 6, 5, x_points, y_points, z_points);
                CubeLight(x, posy, z, -1, 1, 1, 1, -1, 1);
            }
            /*if (t == 0)
            {
                Cube(block, x, y, z, 4, 7, 6, 5);
                CubeLight(x, posy, z, -1, 1, 1, 1, -1, 1);
            }*/
            
            if (b == 0)
            {
                x_points = new float[] {0, 1, 1, 0, 0, 1, 1, 0};
                y_points = new float[] {0, 0, 0, 0, 0.5f, 0.5f, 0.5f, 0.5f};
                z_points = new float[] {0, 0, 1, 1, 0, 0, 1, 1};

                Cube(block, x, y, z, 2, 1, 0, 3, x_points, y_points, z_points);
                CubeLight(x, posy, z, 1, -1, -1, -1, 1, -1);
            }


            this.cr = null;
        }
        
        private void Cube (Block block, int x, int y, int z, int vert1, int vert2, int vert3, int vert4, 
                           float[] x_points, float[] y_points, float[] z_points)
        {
            //  7 - 6 
            //  | 4 + 5
            //  3 + 2 |
            //    0 - 1
            //                0, 1, 2, 3, 4, 5, 6, 7
            //float[] x_points = {0, 1, 1, 0, 0, 1, 1, 0};
            //float[] y_points = {0, 0, 0, 0, 0.5f, 0.5f, 0.5f, 0.5f};
            //float[] z_points = {0, 0, 1, 1, 0, 0, 1, 1};
            
            cr.newVertices.Add(new Vector3(x + x_points[vert1],y + y_points[vert1],z + z_points[vert1]));
            cr.newVertices.Add(new Vector3(x + x_points[vert2],y + y_points[vert2],z + z_points[vert2]));
            cr.newVertices.Add(new Vector3(x + x_points[vert3],y + y_points[vert3],z + z_points[vert3]));
            cr.newVertices.Add(new Vector3(x + x_points[vert4],y + y_points[vert4],z + z_points[vert4]));
            Vector2 texturePos = block.Texture;
            Cube(texturePos);
        }
        
        private void CubeLight(int x, int y, int z, int xmin, int xmax, int ymin, int ymax, int zmin, int zmax)
        {
            int[] blocks1 = new int[9];
            
            if (ymin == ymax)
            {
                blocks1 [0] = cr.GetDaylightValue(x + xmin, y + ymin, z + zmin);
                blocks1 [1] = cr.GetDaylightValue(x       , y + ymin, z + zmin);
                blocks1 [2] = cr.GetDaylightValue(x + xmax, y + ymin, z + zmin);
                blocks1 [3] = cr.GetDaylightValue(x + xmin, y + ymin, z       );
                blocks1 [4] = cr.GetDaylightValue(x,        y + ymin, z       );
                blocks1 [5] = cr.GetDaylightValue(x + xmax, y + ymin, z       );
                blocks1 [6] = cr.GetDaylightValue(x + xmin, y + ymin, z + zmax);
                blocks1 [7] = cr.GetDaylightValue(x,        y + ymin, z + zmax);
                blocks1 [8] = cr.GetDaylightValue(x + xmax, y + ymin, z + zmax);
                
            } else if (xmin == xmax)
            {
                blocks1 [0] = cr.GetDaylightValue(x + xmin, y + ymin, z + zmin);
                blocks1 [1] = cr.GetDaylightValue(x + xmin, y + ymin, z       );
                blocks1 [2] = cr.GetDaylightValue(x + xmin, y + ymin, z + zmax);
                blocks1 [3] = cr.GetDaylightValue(x + xmin, y,        z + zmin);
                blocks1 [4] = cr.GetDaylightValue(x + xmin, y,        z       );
                blocks1 [5] = cr.GetDaylightValue(x + xmin, y,        z + zmax);
                blocks1 [6] = cr.GetDaylightValue(x + xmin, y + ymax, z + zmin);
                blocks1 [7] = cr.GetDaylightValue(x + xmin, y + ymax, z       );
                blocks1 [8] = cr.GetDaylightValue(x + xmin, y + ymax, z + zmax);
                
            } else if (zmin == zmax)
            {
                blocks1 [0] = cr.GetDaylightValue(x + xmin, y + ymin, z + zmin); // -1-1-1  1 1 1
                blocks1 [1] = cr.GetDaylightValue(x,        y + ymin, z + zmin); // 0 -1-1  0 1 1
                blocks1 [2] = cr.GetDaylightValue(x + xmax, y + ymin, z + zmin); // 1 -1-1 -1 1 1
                blocks1 [3] = cr.GetDaylightValue(x + xmin, y,        z + zmin); // -1 0-1  1 0 1
                blocks1 [4] = cr.GetDaylightValue(x,        y,        z + zmin); //  0 0-1  0 0 1
                blocks1 [5] = cr.GetDaylightValue(x + xmax, y,        z + zmin);
                blocks1 [6] = cr.GetDaylightValue(x + xmin, y + ymax, z + zmin);
                blocks1 [7] = cr.GetDaylightValue(x,        y + ymax, z + zmin);
                blocks1 [8] = cr.GetDaylightValue(x + xmax, y + ymax, z + zmin);
            }
            
            float c1 = GetAverageLight(blocks1[0], blocks1[1], blocks1[3], blocks1[4]);
            float c2 = GetAverageLight(blocks1[3], blocks1[4], blocks1[6], blocks1[7]);
            float c3 = GetAverageLight(blocks1[7], blocks1[8], blocks1[4], blocks1[5]);
            float c4 = GetAverageLight(blocks1[1], blocks1[2], blocks1[4], blocks1[5]);
            
            CubeLight(c1, c2, c3, c4);
        }
        
        
        private float GetAverageLight(byte side1, byte side2, byte side3, byte side4)
        {
            return ((float)(side1 + side2 + side3 + side4)) / 64f;//(16f * 4f);
        }
        
        private float GetAverageLight(int side1, int side2, int side3, int side4)
        {
            return ((float)(side1 + side2 + side3 + side4)) / 64f;//(16f * 4f);
        }
        
        
        void CubeLight(int defaultLevel) {
            
            float level = defaultLevel / 15f;
            
            cr.newColor.Add(new Color(0f,0f,0f,level));
            cr.newColor.Add(new Color(0f,0f,0f,level));
            cr.newColor.Add(new Color(0f,0f,0f,level));
            cr.newColor.Add(new Color(0f,0f,0f,level));
        }
        
        void CubeLight(float c1, float c2, float c3, float c4) {
            
            cr.newColor.Add(new Color(0f,0f,0f,c1));
            cr.newColor.Add(new Color(0f,0f,0f,c2));
            cr.newColor.Add(new Color(0f,0f,0f,c3));
            cr.newColor.Add(new Color(0f,0f,0f,c4));
        }
        
        void Cube (Vector2 texturePos)
        {
            cr.newTriangles.Add (cr.faceCount * 4); //1
            cr.newTriangles.Add (cr.faceCount * 4 + 1); //2
            cr.newTriangles.Add (cr.faceCount * 4 + 2); //3
            cr.newTriangles.Add (cr.faceCount * 4); //1
            cr.newTriangles.Add (cr.faceCount * 4 + 2); //3
            cr.newTriangles.Add (cr.faceCount * 4 + 3); //4
            
            cr.newUV.Add (new Vector2 (0.25f * texturePos.x + 0.25f, 0.25f * texturePos.y));
            cr.newUV.Add (new Vector2 (0.25f * texturePos.x + 0.25f, 0.25f * texturePos.y + 0.25f));
            cr.newUV.Add (new Vector2 (0.25f * texturePos.x, 0.25f * texturePos.y + 0.25f));
            cr.newUV.Add (new Vector2 (0.25f * texturePos.x, 0.25f * texturePos.y));
            
            cr.faceCount++; // Add this line
        }
        
    }
}


