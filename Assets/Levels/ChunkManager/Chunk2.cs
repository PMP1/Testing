//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace AssemblyCSharp
{
    public class Chunk2
    {

        public int xPosition;
        public int zPosition;
        public int yHeight;
        int sectionSize = 16;

        public ChunkManager manager;

        //16*16 = 256

        Section2[] sections;
        public int firstSection; 

        byte[] biomeMap;

        public byte[] heightMap;
        public int maxHeight;
        public int minHeight;


        bool[] daylightColumnUpdates;


        public bool containsWater = false;

        public bool isDataLoaded = false;
        public bool isDaylightCalculated = false;
        public bool isLightCalculated = false;

        //section = 4096

        //all 65536
        public Chunk2(ChunkManager manager, int x, int z)
        {
            xPosition = x;
            zPosition = z;
            yHeight = 256;

            this.manager = manager;

            sections = new Section2[sectionSize];
            biomeMap = new byte[sectionSize * sectionSize];
            heightMap = new byte[sectionSize * sectionSize];
            daylightColumnUpdates = new bool[sectionSize * sectionSize];



        }


        public void SetData(byte[] chunkData)
        {
            int height = chunkData.Length / 256; //one slice of 16*16 data

            //split data into sections
            for (int x = 0; x < sectionSize; x++)
            {
                for (int z = 0; z < sectionSize; z++)
                {
                    for (int y = 0; y < height; y++)
                    {
                        //int xyz = x + 16 * (y + 256 * z);
                        byte block = chunkData[x + 16 * (z + 16 * y)];//TODO CHECK THIS

                        if (block != 0) {

                            int section = y / 16;
                            if (sections[section] == null) {
                                sections[section] = new Section2(section, this);
                            }

                            sections[section].SetBlockId(x, y % 16, z, block);
                        }
                    }
                }
            }

            SetFirstSection();
            GenerateDaylight(); //TODO remove this to milti threaded
            SpreadDaylight();
        }

        private void SetFirstSection()
        {
            for (int y = 15; y >= 0; y--)
            {
                if (this.sections[y] != null)
                {
                    this.firstSection = y;
                    return;
                }
            }
        }

        public Section2 GetSection(int y)
        {
            if (y > this.firstSection)
                return null;

            return this.sections [y];
        }

        /// <summary>
        /// A quickway to update a height, used during generation
        /// </summary>
        /// <param name="x">The x coordinate.</pforaram>
        /// <param name="z">The z coordinate.</param>
        /// <param name="height">Height.</param>
        public void SetHeightMap(int x, int z, byte height) 
        {
            this.heightMap[ x + 16 * z] = height;
        }

        public void SetBiomeMap(int x, int z, byte biome) 
        {
            this.biomeMap[ x + 16 * z] = biome;
        }

        public byte GetBlockId(int x, int y, int z)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return 0;

            Section2 sec = this.sections [secY];

            if (sec == null)
            {
                return 0;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                return sec.GetBlockId(x, secYPos, z);
            }
        }

        public byte GetHeightMap(int x, int z)
        {
            return this.heightMap [x + 16 * z];
        }


        public bool hasNeighbours(int x, int y, int z, int blockDist)
        {
            return manager.DoChunksExist(x, y, z, blockDist);
        }

        #region light operators

        public byte GetDaylightValue(int x, int y, int z)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return 0;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return 0;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                return sec.GetDaylightValue(x, secYPos, z);
            }
        }

        public void SetDaylightValue(int x, int y, int z, byte level)
        {
            int secY = y / 16;
            if (sections.Length < secY)
                return;
            
            Section2 sec = this.sections [secY];
            
            if (sec == null)
            {
                return;
            } else
            {
                int secYPos = y - (secY * 16); //TODO check this for speed issues
                sec.SetDatlightData(x, secYPos, z, level);
            }
        }

        public int GetLightOpacity(int x, int y, int z) 
        {
            return BlockManager.GetLightOpacity(GetBlockId(x, y, z));
        }

        public void GenerateDaylight() 
        {
            //bool secChanged[] = false;
            for (int x = 0; x < 16; x++)
            {
                for (int z = 0; z < 16; z++)
                {
                    int lightLevel = 15;

                    for (int y = (this.firstSection * sectionSize) + sectionSize - 1; y > 0; y --)
                    {
                        lightLevel -= this.GetLightOpacity(x, y, z);
                        if (lightLevel > 0) {
                            Section2 sec = this.sections[y /16];
                            sec.SetDatlightData(x, y % 16, z, lightLevel);
                        } else {
                            break;
                        }

                    }

                    this.daylightColumnUpdates[x + 16 * z] = true;
                }
            }
        }

        public void SpreadDaylight()
        {
            for (int x = 0; x < 16; x++)
            {
                for (int z = 0; z < 16; z++)
                {
                    byte c = GetHeightMap(x, z);
                    byte n = z < 15 ? GetHeightMap(x, z + 1) : c;
                    byte e = x < 15 ? GetHeightMap(x + 1, z) : c;
                    byte s = z > 0 ? GetHeightMap(x, z - 1) : c;
                    byte w = x < 0 ? GetHeightMap(x - 1, z) : c;

                    //need to get the heighest neighbour
                    if (n < e) n = e;
                    if (n < s) n = s;
                    if (n < w) n = w;

                    if (c != n )
                    {
                        int ii = 0;
                    }


                    for (int y = c; y < n; y++)
                    {
                        manager.UpdateLightBlock((this.xPosition * 16) + x, y, (this.zPosition * 16) + z, 15);
                        manager.UpdateLightBlock((this.xPosition * 16) + x, y, (this.zPosition * 16) + z + 1, 15);
                        manager.UpdateLightBlock((this.xPosition * 16) + x, y, (this.zPosition * 16) + z - 1, 15);
                        manager.UpdateLightBlock((this.xPosition * 16) + x + 1, y, (this.zPosition * 16) + z, 15);
                        manager.UpdateLightBlock((this.xPosition * 16) + x - 1, y, (this.zPosition * 16) + z, 15);
                            //spread to other columns chunks
                        //SpreadDaylight(x, y, z + 1, 15);
                       // SpreadDaylight(x, y, z - 1, 15);
                        //SpreadDaylight(x + 1, y, z, 15);
                        //SpreadDaylight(x - 1, y, z, 15);
                    }
                }
            }
        }



        public void UpdateDaylight(byte level)
        {

            for (int i = 0; i < 16; i++)
            {
                if (sections[i] != null)
                {
                    Section2 sec = sections[i];
                    if (sec.sectionGO) {
                        sec.sectionGO.SetDaylight(level);
                    }
                }
            }
        }

        #endregion
    }
}

