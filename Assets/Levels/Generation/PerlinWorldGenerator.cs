//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using AssemblyCSharp;
using UnityEngine;

namespace AssemblyCSharp
{
	public static class PerlinWorldGenerator
	{
	
		//private INoise3D terainNoise;
        private static String seed;
        private static IBiomeGenerator biomeGenerator;
        private static List<IFirstPassGenerator> firstPassGenerators = new List<IFirstPassGenerator>();


		public static void Init ()
		{
			Register(new PerlinTerrainGenerator());
		}


        
        
        public static void SetSeed(string newSeed) {
            seed = newSeed;
            
            biomeGenerator = new BiomeGenerator(seed);
            
            foreach (IFirstPassGenerator generator in firstPassGenerators) {
                generator.SetBiomeGenerator(biomeGenerator);
                generator.SetSeed(newSeed);
            }
        }
        
        /// <summary>
        /// Register the specified generator.
        /// </summary>
        /// <param name="generator">Generator.</param>
        private static void Register(IFirstPassGenerator generator) {
            generator.SetBiomeGenerator(biomeGenerator);
            generator.SetSeed(seed);
            firstPassGenerators.Add(generator);
        } 
                
        /// <summary>
        /// Creates the chunk.
        /// </summary>
        /// <param name="chunk">Chunk.</param>
        public static void CreateChunk(Chunk2 chunk) {
            foreach (IFirstPassGenerator generator in firstPassGenerators) {
                generator.GenerateChunk(chunk);
            }
        }
        
        //TODO add texture generation for debug
        public static Color GetTexturePixel(string layerName, int x, int z) {
            float hum =0;
            float temp = 0;
            float height = 0;
            float sea = 0;

            switch (layerName) 
            {
                case "TempHumid":
                    temp = biomeGenerator.GetTemperatureAt(x, z);
                    hum = biomeGenerator.GetHumidityAt(x, z);

                    if (temp < 0.2)
                    {
                        temp = 0f;
                    }
                    else if (temp < 0.4)
                    {
                        temp = 0.2f;
                    }
                    else if (temp < 0.6)
                    {
                        temp = 0.4f;
                    }
                    else if (temp < 0.8)
                    {
                        temp = 0.6f;
                    }
                    else
                    {
                        temp = 0.8f;
                    }

                    if (hum < 0.2)
                    {
                        hum = 0f;
                    }
                    else if (hum < 0.4)
                    {
                        hum = 0.2f;
                    }
                    else if (hum < 0.6)
                    {
                        hum = 0.4f;
                    }
                    else if (hum < 0.8)
                    {
                        hum = 0.6f;
                    }
                    else
                    {
                        hum = 0.8f;
                    }

                    return new Color(temp, 0f, hum);
                case "Temperature":
                    temp = biomeGenerator.GetTemperatureAt(x, z);

                    float cz = Mathf.Clamp((1600f - z) / 1200f, 0, 2f);

                    temp = temp * cz;
                    
                    return new Color(temp, temp * 0.2f, temp * 0.2f);
                    //break;
                case "Humidity":
                    hum = biomeGenerator.GetHumidityAt(x, z);
                    return new Color(hum * 0.2f, hum * 0.2f, hum);
                    //break;
                case "Terrain":
                    BiomeType.Biome biome = biomeGenerator.GetBiomeAt(x, z);
                    switch (biome) 
                    {
                        
                        case BiomeType.Biome.Desert:
                            return Color.yellow;
                            //break;
                        case BiomeType.Biome.GrassLand:
                            return Color.green;
                            //break;
                        case BiomeType.Biome.Tiaga:
                            return Color.white;
                            //break;
                        case BiomeType.Biome.Mountain:
                            return Color.gray;
                            //break;
                        default:
                            return new Color(0.2f,0.8f,0.2f);
                            //break;
                    }
                    //return new Color(hum * 0.2f, hum * 0.2f, hum);
                    break;
                case "Height":
                    height = biomeGenerator.GetHeightBiomeAt(x, z) / 10f;
                    return new Color(height * 0.2f, height * 0.2f, height);
                case "Sea":
                    sea = biomeGenerator.GetSeaAt(x, z);
                    height = biomeGenerator.GetHeightBiomeAt(x, z) / 10f;

                    if (sea > 0.6)
                    {
                        if (height < 0.1 && sea < 0.7) {
                            return Color.yellow;
                        }

                        if (height > 0.2 && height < 0.4) {
                            return Color.grey;
                        }

                        if (height >= 0.4)
                        {
                            return Color.white;
                        }
                        return new Color(0.3f, 1, 0.3f);

                    }
                    return new Color(sea * 0.2f, sea * 0.2f, sea);
                case "SeaTemp":
                    if (x == 500 && z == 500)
                    {
                        int ii = 0;
                    }

                    sea = biomeGenerator.GetSeaAt(x, z);
                    height = biomeGenerator.GetHeightBiomeAt(x, z) / 10f;
                    temp = biomeGenerator.GetTemperatureAt(x, z);
                    hum = biomeGenerator.GetHumidityAt(x, z);

                    float cz1 = Mathf.Clamp((1600f - z) / 1200f, 0, 2f);
                    
                    temp = Mathf.Clamp01(temp * cz1);

                    BiomeType type = new BiomeType();

                    BiomeType.Biome bio = type.GetBiome((int)(temp * 10), (int)(hum * 10));

                    BiomeType.BiomeHeight h = type.GetBiomeHeight(height, sea);


                    if (h == BiomeType.BiomeHeight.Sea)
                    {
                        return new Color(sea * 0.2f, sea * 0.2f, sea);
                    }
                    else 
                    {
                        return type.GetBiomeColor(bio);
                    }


                    if (sea > 0.6)
                    {
                        if (height < 0.1 && sea < 0.7) {
                            return Color.yellow;
                        }
                        
                        if (height > 0.2 && height < 0.4) {
                            return Color.grey;
                        }
                        
                        if (height >= 0.4)
                        {
                            return Color.white;
                        }
                        return new Color(0.3f, 1, 0.3f);
                        
                    }



            }
            return Color.black;
        }
		
	}
}

