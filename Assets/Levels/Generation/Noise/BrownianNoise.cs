//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace AssemblyCSharp
{
	public abstract class BrownianNoise
	{
		public static double DEFAULT_PERSISTENCE = 0.836281;
		public static double DEFAULT_LACUNARITY = 2.1379201;

		private double lacunarity = DEFAULT_LACUNARITY;
		private double persistence = DEFAULT_PERSISTENCE;

		private int octaves;
		private double[] spectralWeights;

		public BrownianNoise ()
		{
			SetOctaves(2);
		}

		//may beed a get scale here...


		public void SetOctaves(int octaves) {
			this.octaves = octaves;
			
			// recompute weights eagerly
			spectralWeights = new double[octaves];
			
			for (int i = 0; i < octaves; i++) {
				spectralWeights[i] = Math.Pow(lacunarity, -persistence * i);
			}
		}
		public int GetOctaves() {
			return octaves;
		}

		/// <summary>
		/// Lacunarity is what makes the frequency grow. Each octave the frequency is multiplied by the lacunarity.
		/// </summary>
		/// <returns>The lacunarity.</returns>
		public double GetLacunarity() {
			return this.lacunarity;
		}
		public void SetLacunarity(double lacunarity) {
			this.lacunarity = lacunarity;
		}


		/// <summary>
		/// Persistence is what makes the amplitude shrink.
		/// More precicely the amplitude of octave i = lacunarity^(-persistence * i) 
		/// </summary>
		/// <returns>The persistance.</returns>
		public double GetPersistance() {
			return this.persistence;
		}
		public void SetPersistence(double persistence) {
			this.persistence = persistence;
		}

		protected double GetSpectralWeight(int octave) {
			return spectralWeights[octave];
		}

	}
}

