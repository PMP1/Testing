//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace AssemblyCSharp
{
    public class LightGenerator
    {
        public LightGenerator()
        {
        }

        public void GenerateDaylight(Chunk chunk) 
        {
            int sectionSize = chunk.sectionSize;

            int min = chunk.minHeight;
            int max = chunk.maxHeight;

            int maxSection = max / sectionSize;
            int minSection = min / sectionSize;

            int noSections = chunk.sections.Length;
            //quick fill to max + 1

            //are there empty sections above max?
            if (noSections < maxSection - 1)
            {
                //loop through each section and set daylight
                for (int i = noSections - 1; i > maxSection; i--)
                {
                    Section section = chunk.sections[i];

                    for (int x = 0; x < sectionSize; x++)
                    {
                        for (int z = 0; z < sectionSize; z++)
                        {
                            for (int y = 0; y < sectionSize; y++)
                            {
                                section.daylightData[x,y,z] = 15;
                            }   
                        }
                    }
                }
            }

            //now fillin the partialsections
            for (int i = maxSection; i >= minSection; i--)
            {
                Section section = chunk.sections[i];
                int globalY = i * sectionSize;

                for (int x = 0; x < sectionSize; x++)
                {
                    for (int z = 0; z < sectionSize; z++)
                    {
                        int height = chunk.heightMap[x, z];
                        for (int y = sectionSize - 1; y >= 0 && y + globalY > height ; y--)
                        {
                            section.daylightData[x,y,z] = 15;
                        }   
                    }
                }
            }
            
        }

        public void SpreadDaylight(Chunk chunk)
        {
            int sectionSize = chunk.sectionSize;
            int noSections = chunk.sections.Length;
         
            for (int i = noSections - 1; i >=0; i--)
            { 

                Section section = chunk.sections [i];

                //spread daylight when we hit a floor
                for (int x = 0; x < sectionSize; x++)
                {
                    for (int z = 0; z < sectionSize; z++)
                    {

                        int y = chunk.heightMap [x, z];

                        y = y % sectionSize;

                        //if heightmap value is above this section then we need to take y from the previous section
                        if (y > -1)
                        {
                            //Make sure that y is local not global
                            section.daylightData [x, (y + 1) % sectionSize, z] = 15;

                            SpreadDaylight(x, y + 2, z, 13, section); //up
                            SpreadDaylight(x, y, z, 13, section); //down
                            SpreadDaylight(x + 1, y + 1, z, 13, section);
                            SpreadDaylight(x - 1, y + 1, z, 13, section);
                            SpreadDaylight(x, y + 1, z + 1, 13, section);
                            SpreadDaylight(x, y + 1, z - 1, 13, section);
                        }
                    }
                }

                //Get the daylight from neighbouring chunks
                //SpreadDaylightFromXSection (chunkX + 1, 0, sectionSize - 1, section.sectionY);
                //SpreadDaylightFromXSection (chunkX - 1, sectionSize - 1, 0, section.sectionY);
                //SpreadDaylightFromZSection (chunkZ + 1, 0, sectionSize - 1, section.sectionY);
                //SpreadDaylightFromZSection (chunkZ - 1, sectionSize - 1, 0, section.sectionY);
            }
        }

        public void SpreadDaylightFromSides(Chunk chunk)
        {

        }

            
        private void SpreadDaylight(int x, int y, int z, byte level, Section section) {

            if (!section.IsInSection(x, y, z))
                return;


            //TODO spread light up a chunk

            if (section.daylightData [x, y, z] < level && level > 1 && section.Block(x, y, z) == 0)
            {

                section.daylightData [x, y, z] = level;
                section.chunk.updateLight = true;
                level -= 2;
                SpreadDaylight(x, y + 1, z, level, section); //up
                SpreadDaylight(x, y - 1, z, level, section); //down
                SpreadDaylight(x + 1, y, z, level, section);
                SpreadDaylight(x - 1, y, z, level, section);
                SpreadDaylight(x, y, z + 1, level, section);
                SpreadDaylight(x, y, z - 1, level, section);
            }
        }
    }
}

