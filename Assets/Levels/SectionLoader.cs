//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading;
using System.Collections.Generic;

namespace AssemblyCSharp
{
    public static class SectionLoader
    {
        private static PCQueue queue = new PCQueue(1);

        public static void RequestSection (Section section) {

            //Action test = PerlinWorldGenerator.CreateSection(section)

            queue.EngueueItem(() =>
            {
                if (!section.isLoaded)
                    PerlinWorldGenerator.CreateSection(section);

            });
        }
    }

    public class PCQueue
    {
        readonly object _locker = new object();
        Thread[] _workers;
        Queue<Action> _itemQ = new Queue<Action>();

        public PCQueue (int workerCount)
        {
            _workers = new Thread[workerCount];

            for (int i = 0; i < workerCount; i++)
            {
                (_workers[i]= new Thread(Consume)).Start();
            }
        }

        public void Shutdown (bool waitForWorkers)
        {
            foreach (Thread worker in _workers)
            {
                EngueueItem(null);
            }

            if (waitForWorkers)
            {
                foreach(Thread worker in _workers)
                {
                    worker.Join();
                }
            }
        }

        public void EngueueItem(Action item)
        {
            lock (_locker)
            {
                _itemQ.Enqueue(item);
                Monitor.Pulse(_locker);
            }
        }

        private void Consume()
        {
            while (true)
            {
                Action item;
                lock(_locker)
                {
                    while(_itemQ.Count == 0) Monitor.Wait(_locker);
                    item = _itemQ.Dequeue();
                }
                if (item == null) return;
                item();
            }
        }
    }
}

